// ^ = xor
const key = [0x12345678, 0x12345678, 0x12345678, 0x12345678, 
             0x12345678, 0x12345678, 0x12345678, 0x12345678];
let rKeys = [ // 15 keys needed
             [0,0,0,0], // each element is rKey with 4 32bit words
             [0,0,0,0],
             [0,0,0,0],
             [0,0,0,0],
             [0,0,0,0],
             [0,0,0,0],
             [0,0,0,0],
             [0,0,0,0],
             [0,0,0,0],
             [0,0,0,0],
             [0,0,0,0],
             [0,0,0,0],
             [0,0,0,0],
             [0,0,0,0],
             [0,0,0,0]
            ] // each round key is 128 bits
let rCon = [0,0,0,0,0,0,0,0]; // 8 rcon for 256bit
let sBox  = [
  [0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76],
  [0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0],
  [0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15],
  [0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75],
  [0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84],
  [0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf],
  [0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8],
  [0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2],
  [0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73],
  [0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb],
  [0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79],
  [0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08],
  [0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a],
  [0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e],
  [0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf],
  [0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16]
]
function populate_rCon() {
  for(i=1;i<=rCon.length;i++) {
    if(i === 1) {
      rCon[i-1] = 1;
    } else if ( i > 1 && rCon[i-2] < 0x80) {
      rCon[i-1] = 2*rCon[i-2];
    } else {
      rCon[i-1] = (2*rCon[i-2]) ^ 0x11B;
    }
  }
  for(i=0;i<rCon.length;i++) {
    rCon[i] = rCon[i] << 24;
  }
}

function RotWord(wordArray) {
  let rot = wordArray;
  wordArray[0] = rot[1];
  wordArray[1] = rot[2];
  wordArray[2] = rot[3];
  wordArray[3] = rot[0];
}

function SubWord(wordArray) {
  for(i = 0; i < wordArray.length; i ++) {
    /* Each element in wordArray is an 8 bit number
     * to access sBox, we use the most significant 4 bits of
     * each entry as row access and the least as col access
     */
    let row = (wordArray[i] >> 4) & 0xf;
    let col = wordArray[i] & 0xf;
    wordArray[i] = sBox[row][col];
  }
}

function WordToArray(word) { // create 4 element array consisting of 8bit sections of sections of 32 bit word
  wordArray = [word&0xff,(word>>8)&0xff,(word>>16)&0xff,(word>>24)&0xff];
  return wordArray;
}

function ArrayToWord(wordArray) {
  let word = wordArray[3]<<24 + wordArray[2]<<16+wordArray[1]<<8+wordArray[0];
  return word;
}

function ExpandKey(key) {
  populate_rCon(); // should probably hard code in rCon for efficiency later
  let N = key.length; // 256bit key word count (32bit word) (8)
  let R = rKeys.length; // round keys needed for 256bit (15)
  let W = Array(4*R);
  for(i = 0; i < W.length; i++) { // iterate through each word of key
    if(i < N) {
      W[i] = key[i];
    } else if(i>=N && i%N === 0) {
      let wordArray = WordToArray(W[i-1]);
      let rot = RotWord(wordArray);
      let sub = SubWord(rot);
      W[i] = W[i-N] ^ ArrayToWord(sub) ^ rCon[Math.floor(i/N)];
    } else if(i>=N && i%N === 4) {
      let wordArray = WordToArray(W[i-1]);
      let sub = SubWord(wordArray);
      W[i] = W[i-N] ^ ArrayToWord(sub);
    } else {
      W[i] = W[i-N] ^ W[i-1];
    }
    rKeys[Math.floor(i/N)][i%4] = W[i];
  }
}

function AddRoundKey(stateArray, rKey) {

}

function SubBytes(stateArray, rKey) {

}

function ShiftRows(stateArray, rKey) {

}

function MixColumns(stateArray, rKey) {

}


function AES_Encrypt(message) {

}

/*
function AddRoundKey(state, rKey); // each byte of state is combined to a byte of round key using xor
*/